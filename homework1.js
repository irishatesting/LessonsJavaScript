'number' + 3 + 3
// буде виведено number33, оскільки number строка, та "+"" буде як конкатенація

null + 3
//буде виведено 3, оскыльки null це нічого, пусто, то пусто + 3 буде 3 :) 

5 && "qwerty"
//виведеться qwerty, оскільки тут використали логічне "і" - два вирази дають значення true (5 - true, "qwerty" - true), тому виводиться останне true - qwerty


+'40' + +'2' + "hillel";
// буде виведено 42hillel. 
//+ перед строкою означає, що цей рядок буде переведено до числа, тобто 40 та 2 числа, додаємо їх = 42
// потім робимо конкатенацію 42 числа та строки hillel

'10' - 5 === 6;
// буде виведено false. '10' строка перетвориться на число та виконається операція віднімання 10 - 5, буде 5. І далі 5 === (строго не дорівнію) 6, тому false

true + false
//буде виведено 1. true має значення 1, false - має значення 0. 1 + 0 = 1

'4px' - 3
//буде виведено NaN. Якщо у виразі є операція віднімання, то це значить 4рх переводимо до числа, а так як перевести не можливо, то виходить NaN

'4' - 3
// буде виведено 1. Використовується операція віднімання, тому "4" переводимо до числа = 4 та робимо операцію віднімання 4 - 3 = 1

'6' + 3 ** 0;
// буде виведено 61. Спочатку робимо возведение у ступінь, оскільки ця операція має вищий пріоритет ніж додавання. 3 ** 0 буде 1. Далі робимо конкатенацію "6" та 1, отримуємо 61

12 / '6'
// буде виведено 2. У виразі використовується операція ділення / , тому строка "6" буде переведена до числа, і 12 / 6 = 2

'10' + (5 === 6);
//Буде виведено 10false. Спочатку робимо дії у дужках - 5 === 6 - це false (5 строго не дорівнює 6). Далі робимо конкатенацію 10 та false

null == ''
//буде виведено false. Null завжди рівний собі та undefine

3 ** (9 / 3);
//буде виведено 27. Спочтаку робимо дію в дужках 9 / 3 = 3. Далі рахуємо 3 ** 3 це буде 27

!!'false' == !!'true'
// Буде виведено false.  Рядок "false" перетворюється в булеве значення і два рази підряд застосовується не, тобто перший раз маємо значення true, потім false. Теж саме (два рази НЕ) на рядок true, будемо мати true. В кінці порівнюємо false == true. Вони не рівні, тому false

0 || '0' && 1
// буде виведено 1. '0' && 1 - число 0 та 1 - два тру, тому виведе останню 1. Далі оператор АБО, він повертає другий операнд 1, оскільки перший операнд 0 це false

(+null == false) < 1;
//Буде виведено false. +null буде число - 0. Далі робимо операцію ==, 0 == false, так буде  true (0 == 0). Далі true < 1 - тобто 1 < 1 - ні, тому false

false && true || true
// Буде виведено true. Спочатку робимо операцію ТА false && true - буде false, оскільки первий операнд false. Далі робимо операцію || АБО false || true  - виведе true, оскільки виводить перший який зузсрінеться тру

false && (false || true);
//Виведе false. Спочатку робимо оперцію АБО false || true, буде true. Далі операцію ТА false && true , тому буде false

(+null == false) < 1 ** 5;
//Виведе false. +null перетворюємо на число, буде 0. Далі 0 == false - тобто 0 == 0 - true. Порахуємо 1 ** 5 = 1. А отже, true < 1, це 1 < 1 - буде false